Get all the unique elements of a column:
df.coulmn_name.unique()

Get value of column T in the row where P is 100:
df.loc[df.P == 100, 'T'].values[0]

Make list into df column
df=pd.DataFrame({'column_name':List_name})

Read file:
with opden('filename.txt') as f:
    liste = f.read().splitlines
    
Write to file:
with open('filename.txt', 'w') as f:
    for item in liste:
        f.write("%s\n"%item)
        
Save plot to file:
plt.savefig("filename", bbox_inches='tight')

Subplot(_,_,_)
First _ is column
Secong _ is rows
Third _ are total nr of plots


FROM NOTEBOOK COURSE:

Defining column type, converting to another type:

df = pd.DataFrame()
df['foo'] = np.array([1, 2], dtype=np.int32)
df['bar'] = pd.Series([3, 4], dtype=np.float32)
df['baz'] = ['five', 'six']
print('Data types:', df.dtypes.to_dict()) # df.dtypes returns a series, which can be converted to a dict df

df.describe() 

Indexing, series:

print('Element at index 1:', s[1]) 
print('Elements from index 1:', s[1:].values)
print('Elements at index 0 and 2:', s[[0, 2]].values)

s = pd.Series([0, 1, 2, 3, 4])
print('Slice with s[2:4]:', s[2:4].values)
print('Slice with s.loc[2:4]:', s.loc[2:4].values)

Indexing, dataframe:

print('Getting the foo column with df.foo:', df.foo.values)
print('Is equivalent to using df["foo"]:', df["foo"].values)
print('Which is the same as df.loc[:, "foo"]:', df.loc[:, "foo"].values)

print('Row at index "a":', df.loc["a"].values)
print('Rows at index "a" and "c":')
df.loc[["a", "c"]]

print('Elements in row at position 0:', df.iloc[0].values)
print('Elements in rows at positions 0 and 1')
df.iloc[[0, 1]]

Timeseries, ploting periods:

# Generate a datetime index 100 steps spaced 1 Day appart starting at year 2000
dt_index = pd.date_range(start='2000-01-01', freq='1D', periods=100)
# Initialize a dataframe using this index
df = pd.DataFrame(index=dt_index)
# Fill it with some brownian motion
for i in range(5):
    df[f'var_{i}'] = np.random.normal(size=len(df)).cumsum()
    
# Generate figure with three stacked plotting areas
fig, (ax1, ax2, ax3) = plt.subplots(figsize=(12, 10), nrows=3)
# Plot each column with built-in plot function
df.plot(ax=ax1, title='100 days of brownian motion')

# Slice out just the month of February 2000 and plot it
# Note: since we're using look, it will actually include March 1st
df_slc = df.loc['2000-02-01':'2000-03-01']
df_slc.plot(ax=ax2, title='Just February')

# Resample time series from day resolution to mean and take average value 
df_resamp = df.resample('1W').mean()
df_resamp.plot(ax=ax3, title='Resampled to week resolution')

# Automatically adjust plot to avoid overlapping elements
plt.tight_layout()

Nyttig:

-df.info()
